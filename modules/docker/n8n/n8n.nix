# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."n8n" = {
    image = "docker.n8n.io/n8nio/n8n";
    environment = {
      "GENERIC_TIMEZONE" = "\"Europe/Paris\"";
      "N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS" = "true";
      "N8N_RUNNERS_ENABLED" = "true";
      "TZ" = "\"Europe/Paris\"";
    };
    volumes = [
      "/home/maxlttr/Syncthing/docker/n8n:/home/node/.n8n:rw"
    ];
    ports = [
      "5678:5678/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=n8n"
      "--network=n8n_default"
    ];
  };
  systemd.services."docker-n8n" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-n8n_default.service"
    ];
    requires = [
      "docker-network-n8n_default.service"
    ];
    partOf = [
      "docker-compose-n8n-root.target"
    ];
    wantedBy = [
      "docker-compose-n8n-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-n8n_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f n8n_default";
    };
    script = ''
      docker network inspect n8n_default || docker network create n8n_default
    '';
    partOf = [ "docker-compose-n8n-root.target" ];
    wantedBy = [ "docker-compose-n8n-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-n8n-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
