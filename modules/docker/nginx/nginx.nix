# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."nginx" = {
    image = "nginx:latest";
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.nginx-http.entrypoints" = "web";
      "traefik.http.routers.nginx-http.rule" = "Host(`nginx.maxlttr7.duckdns.org`)";
      "traefik.http.routers.nginx-https.entrypoints" = "websecure";
      "traefik.http.routers.nginx-https.rule" = "Host(`nginx.maxlttr7.duckdns.org`)";
      "traefik.http.routers.nginx-https.tls" = "true";
      "traefik.http.routers.nginx-https.tls.certresolver" = "myresolver";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=nginx"
      "--network=traefik_proxy"
    ];
  };
  systemd.services."docker-nginx" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    partOf = [
      "docker-compose-nginx-root.target"
    ];
    wantedBy = [
      "docker-compose-nginx-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-nginx-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
